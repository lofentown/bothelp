import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import ChatNotFound
import asyncio
from fastapi import FastAPI
from uvicorn import run

from settings import bot_settings
from bot_menu import menu
import orm

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_settings.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = FastAPI()
@app.get("/")
async def root():
    return {"message": "Hello, World!"}

 #–°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_message = State()

class Mailing(StatesGroup):
    text = State()
    entity = State()

class Support(StatesGroup):
    waiting_for_message = State()
    waiting_for_reply = State()
    #–¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    waiting_for_user_id = State()


async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand('start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ]
    )

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    text = f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, *{message.from_user.first_name}*!\n\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ò–ò –±–æ—Ç–æ–º!\n –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'
    inline_markup = await menu.main_menu()
    response = orm.add_user(message.from_user.id, message.from_user.username)
    username = message.from_user.username
    if response == 1:
        users = orm.get_admins()
        for user in users:
                if message.from_user.username == None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                elif message.from_user.username != None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                else:
                   await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')

    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await set_default_commands(dp)

@dp.message_handler(lambda message: orm.check_admin(message.from_user.id) == 1 and message.text == '/admin')
async def get_admin_menu(message: types.Message):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    inline_markup = await menu.admin_menu()
    await message.answer(text, reply_markup=inline_markup)

@dp.callback_query_handler(lambda c: c.data == 'answer')
async def handle_reply_button(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞:")
    await Support.waiting_for_user_id.set()

@dp.message_handler(state=Support.waiting_for_user_id)
async def get_user_id(message: types.Message, state: FSMContext):
    user_id = message.text
    try:
        user_id = int(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        await state.update_data(user_id=user_id)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ID: {user_id}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await Support.waiting_for_reply.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.callback_query_handler(lambda c: c.data == 'help')
async def handle_reply_button(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:")
    await Support.waiting_for_message.set()

@dp.message_handler(state=Support.waiting_for_message)
async def receive_problem(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å", —Å–æ–¥–µ—Ä–∂–∞—â–µ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user_id}")
    )
    users = orm.get_admins()
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({username}):\n\n{message.text}",
                reply_markup=reply_markup
            )
        except ChatNotFound:
            print(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")

    orm.add_problem(user_id, message.text)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(lambda c: c.data.startswith("reply"))
async def handle_reply_button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
    await state.update_data(user_id=user_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await Support.waiting_for_reply.set()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(state=Support.waiting_for_reply)
async def send_reply(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data.get("user_id")

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.finish()
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}")
        await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'create_mailing')
async def create_mailing(callback_query: types.CallbackQuery):
    text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await Mailing.text.set()


@dp.message_handler(state=Mailing.text)
async def mailing(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text, entity=message.entities)
    state_data = await state.get_data()
    text = state_data.get('text')
    entity = state_data.get('entity')
    users = orm.get_all_users()
    await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É', parse_mode='Markdown')
    count = 0
    count_of_banned = 0
    for user in users:
        try:
            await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
            count += 1
            if count == 15:
                await asyncio.sleep(5)
                count = 0
        except:
            count_of_banned += 1
    answer = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len(users)-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
    orm.add_blocked(count_of_banned)
    await message.answer(answer, parse_mode='Markdown')
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'information')
async def exit(message: types.Message):
    text = f'''üåü <b>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> üåü  

–ù–∞—à –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ üì© –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ <b>–¢–µ—Ä–∞–ø–∏—è</b>, —Å—Ç–æ–ª–∫–Ω—É–≤—à–∏—Ö—Å—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ö–æ–≥–¥–∞ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. üöÄ  

üîÑ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>  
1Ô∏è‚É£ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. üìù  
2Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. üõ†  
3Ô∏è‚É£ –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üì¨, –≤–∫–ª—é—á–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. ‚úÖ  

üéØ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤! üïí‚ú®'''
    inline_markup = await menu.main_menu()
    await bot.send_message(message.from_user.id, text, reply_markup=inline_markup, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data == 'spisok')
async def handle_reply_button(callback_query: types.CallbackQuery):
    zadaniya = orm.get_all_users()
    for zadanie in zadaniya:
        username = f"@{zadanie.username}" if zadanie.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        await callback_query.message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {zadanie.tg_id} {username} –±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞: {zadanie.problem_text}")


@dp.callback_query_handler(lambda c: c.data == 'menu')
async def exit(message: types.Message):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'
    inline_markup = await menu.main_menu()
    await bot.send_message(message.from_user.id, text, reply_markup=inline_markup)

@app.get("/bot_status")
async def bot_status():
    return {"status": "running", "bot_name": "TherapyBot"}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI
def start_fastapi():
    run(app, host="0.0.0.0", port=8000)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
