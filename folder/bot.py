import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import ChatNotFound
import asyncio
from fastapi import FastAPI
from uvicorn import run
from aiogram.types import InputFile
from aiogram.utils import executor
import os
import csv

from settings import bot_settings
from bot_menu import menu
import orm

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_settings.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = FastAPI()
@app.get("/")
async def root():
    return {"message": "Hello, World!"}

 #–°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_message = State()

class Mailing(StatesGroup):
    text = State()
    entity = State()

class Support(StatesGroup):
    waiting_for_message = State()
    waiting_for_reply = State()
    waiting_for_otziv = State()
    #–¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    waiting_for_user_id = State()
    waiting_for_reply2 = State()
    waiting_for_send = State()

async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand('start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ]
    )

GROUP_CHAT_ID = -4719535439
GROUP2 = -4672936408
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    text = f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, *{message.from_user.first_name}*!\n\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ò–ò –±–æ—Ç–æ–º!\n –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'
    inline_markup = await menu.main_menu()
    response = orm.add_user(message.from_user.id, message.from_user.username)
    username = message.from_user.username
    if response == 1:
        users = orm.get_admins()
        for user in users:
                if message.from_user.username == None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                elif message.from_user.username != None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                else:
                   await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')

    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    #await message.answer(f"ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞: {message.chat.id}")
    #print(f"Chat ID: {message.chat.id}")
    await set_default_commands(dp)

@dp.message_handler(lambda message: orm.check_admin(message.from_user.id) == 1 and message.text == '/admin')
async def get_admin_menu(message: types.Message):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    inline_markup = await menu.admin_menu()
    await message.answer(text, reply_markup=inline_markup)

@dp.callback_query_handler(lambda c: c.data == 'answer')
async def handle_reply_button(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞:")
    await Support.waiting_for_user_id.set()

@dp.message_handler(state=Support.waiting_for_user_id)
async def get_user_id(message: types.Message, state: FSMContext):
    user_id = message.text
    try:
        user_id = int(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        await state.update_data(user_id=user_id, admin_id=message.from_user.id)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ID: {user_id}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await Support.waiting_for_send.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(state=Support.waiting_for_send)
async def send_reply(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data.get("user_id")
    expected_admin_id = state_data.get("admin_id")

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.finish()
        return

    if message.from_user.id == expected_admin_id:
        try:
            await bot.send_message(chat_id=user_id, text=f'‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùóÔ∏è: {message.text}')
            await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            await state.finish()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await state.finish()
    else:
        return


@dp.callback_query_handler(lambda c: c.data == 'help')
async def handle_reply_button(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:")
    await Support.waiting_for_message.set()

@dp.callback_query_handler(lambda c: c.data == 'otziv')
async def handle_reply_button(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await Support.waiting_for_otziv.set()

@dp.message_handler(state=Support.waiting_for_otziv)
async def receive_problem(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å", —Å–æ–¥–µ—Ä–∂–∞—â–µ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
        "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply2:{user_id},{message.message_id}"
    ))
    inline_markup.add(types.InlineKeyboardButton(
        text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ',
        callback_data=f"end2:{message.message_id}"
    ))

    users = orm.get_admins()
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=f"üîî–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤\n\n"
                     f"üë§–ò–º—è: {user_name}\n"
                     f"üîóUsername: {username}\n"
                     f"üÜîID: {user_id}\n"
                     f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
                reply_markup=inline_markup
            )
        except ChatNotFound:
            print(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.tg_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
    try:
        await bot.send_message(
            chat_id=GROUP2,
            text=f"üîî–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n\n"
                 f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({username})\n"
                 f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                 f"üÜîID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n"
                 f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
            reply_markup=inline_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    orm.add_otziv(user_id, username, message.text, message.message_id)
    print(message.message_id)
    inline_markup = await menu.main_menu()
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
        reply_markup=inline_markup
    )
    await state.finish()

@dp.message_handler(state=Support.waiting_for_message)
async def receive_problem(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å", —Å–æ–¥–µ—Ä–∂–∞—â–µ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton(
        "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user_id},{message.message_id}"
    ))
    inline_markup.add(types.InlineKeyboardButton(
        text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ',
        callback_data=f"end:{message.message_id}"
    ))

    users = orm.get_admins()
    for user in users:
        try:
            await bot.send_message(
                chat_id=user.tg_id,
                text=f"üîî–ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n\n"
                     f"üë§–ò–º—è: {user_name}\n"
                     f"üîóUsername: {username}\n"
                     f"üÜîID: {user_id}\n"
                     f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
                reply_markup=inline_markup
            )
        except ChatNotFound:
            print(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.tg_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
    try:
        await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üîî–ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n\n"
                 f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({username})\n"
                 f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                 f"üÜîID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n"
                 f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
            reply_markup=inline_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    orm.add_problem(user_id, username, message.text, message.message_id)
    print(message.message_id)
    inline_markup = await menu.main_menu()
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
        reply_markup=inline_markup
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(lambda c: c.data.startswith("reply"))
async def handle_reply_button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.data.split(":")[1]
    mess_id = callback_query.data.split(",")[1]
    admin_id = callback_query.from_user.id
    await state.update_data(user_id=user_id, admin_id=admin_id, mess_id=mess_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await Support.waiting_for_reply.set()

@dp.callback_query_handler(lambda c: c.data.startswith("reply2"))
async def handle_reply_button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.data.split(":")[1]
    mess_id = callback_query.data.split(",")[1]
    admin_id = callback_query.from_user.id
    await state.update_data(user_id=user_id, admin_id=admin_id, mess_id=mess_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await Support.waiting_for_reply2.set()

@dp.callback_query_handler(lambda c: c.data.startswith("end2"))
async def handle_end_button(callback_query: types.CallbackQuery, state: FSMContext):
    mess_id = callback_query.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
    orm.delete_otziv(mess_id)
    text, idus, usname = orm.get_otziv(mess_id)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"‚úÖ–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω\n\n"
             f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {usname}\n"
             f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {idus}\n"
             f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await callback_query.message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data.startswith("end"))
async def handle_end_button(callback_query: types.CallbackQuery, state: FSMContext):
    mess_id = callback_query.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
    orm.delete_problem(mess_id)
    text, idus, usname = orm.get_problem(mess_id)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"‚úÖ–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞\n\n"
             f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {usname}\n"
             f"üÜîID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {idus}\n"
             f"üí¨–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await callback_query.message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(state=Support.waiting_for_reply)
async def send_reply(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data.get("user_id")
    expected_admin_id = state_data.get("admin_id")
    mess_id = state_data.get("mess_id")
    orm.add_reshenie(mess_id, message.text)

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.finish()
        return

    if message.from_user.id == expected_admin_id:
        try:
            await bot.send_message(chat_id=user_id, text=f'‚ùóÔ∏è–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É‚ùóÔ∏è: {message.text}')
            await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            await state.finish()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        return

@dp.message_handler(state=Support.waiting_for_reply2)
async def send_reply(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data.get("user_id")
    expected_admin_id = state_data.get("admin_id")
    mess_id = state_data.get("mess_id")
    orm.add_otvet(mess_id, message.text)

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.finish()
        return

    if message.from_user.id == expected_admin_id:
        try:
            await bot.send_message(chat_id=user_id, text=f'‚ùóÔ∏è–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤‚ùóÔ∏è: {message.text}')
            await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            await state.finish()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        return

@dp.callback_query_handler(lambda c: c.data == 'create_mailing')
async def create_mailing(callback_query: types.CallbackQuery):
    text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
    await callback_query.message.answer(text)
    await Mailing.text.set()


@dp.message_handler(state=Mailing.text)
async def mailing(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text, entity=message.entities)
    state_data = await state.get_data()
    text = state_data.get('text')
    entity = state_data.get('entity')
    users = orm.get_all_users()
    await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É', parse_mode='Markdown')
    count = 0
    count_of_banned = 0
    for user in users:
        try:
            await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
            count += 1
            if count == 15:
                await asyncio.sleep(5)
                count = 0
        except:
            count_of_banned += 1
    answer = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len(users)-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
    orm.add_blocked(count_of_banned)
    await message.answer(answer, parse_mode='Markdown')
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'information')
async def inform(message: types.Message):
    text = f'''üåü <b>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> üåü  

–ù–∞—à –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò–ò-–±–æ—Ç–∞ <b>"–¢–µ—Ä–∞–ø–∏—è"</b>, –∫–æ—Ç–æ—Ä—ã–µ:
üõ† —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞–º–∏
üì£ —Ö–æ—Ç—è—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –æ –Ω–∞—à–µ–º –±–æ—Ç–µ

<b>–ú—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞–º —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ –±–æ—Ç–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º.</b>

‚û°Ô∏è <b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –±–æ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã:</b>
1Ô∏è‚É£ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üìù  
2Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ –≤ —Ä–∞–±–æ—Ç—É ü´°  
3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üì¨

‚ù§Ô∏è <b>–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞–º, –∞ –º—ã –±—ã–ª–∏ –ø–æ–ª–µ–∑–Ω—ã –≤–∞–º.</b>'''


    inline_markup = await menu.main_menu()
    await bot.send_message(message.from_user.id, text, reply_markup=inline_markup, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data == 'spisok')
async def spisok(callback_query: types.CallbackQuery):
    zadaniya = orm.spisok_problem()

    for zadanie in zadaniya:
        username = f"@{zadanie.username}" if zadanie.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(
            "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{zadanie.tg_id}"
        ))
        inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ',
            callback_data=f"end:{zadanie.problem_text}"
        ))
        text = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {zadanie.tg_id} {username} –±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞: {zadanie.problem_text}"
        await callback_query.message.answer(text, reply_markup=inline_markup)

@dp.callback_query_handler(lambda c: c.data == 'spisok_otziv')
async def spisok(callback_query: types.CallbackQuery):
    zadaniya = orm.spisok_otziv()

    for zadanie in zadaniya:
        username = f"@{zadanie.username}" if zadanie.username else "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(
            "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{zadanie.tg_id}"
        ))
        inline_markup.add(types.InlineKeyboardButton(
            text='–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ',
            callback_data=f"end:{zadanie.otziv_text}"
        ))
        text = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {zadanie.tg_id} {username} –±—ã–ª –æ—Ç–∑—ã–≤: {zadanie.otziv_text}"
        await callback_query.message.answer(text, reply_markup=inline_markup)

@dp.callback_query_handler(lambda c: c.data == 'vse_problems')
async def problems(callback_query: types.CallbackQuery):
    txt_file_path, excel_file_path = orm.vse_problems()
    text = '–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã: '
    await callback_query.message.answer(text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await bot.send_document(
        callback_query.message.chat.id,
        InputFile(txt_file_path),
        caption="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    await bot.send_document(
        callback_query.message.chat.id,
        InputFile(excel_file_path),
        caption="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    os.remove(txt_file_path)
    os.remove(excel_file_path)

@dp.callback_query_handler(lambda c: c.data == 'vse_otzivi')
async def problems(callback_query: types.CallbackQuery):
    txt_file_path, excel_file_path = orm.vse_otziv()
    text = '–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã: '
    await callback_query.message.answer(text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await bot.send_document(
        callback_query.message.chat.id,
        InputFile(txt_file_path),
        caption="–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    await bot.send_document(
        callback_query.message.chat.id,
        InputFile(excel_file_path),
        caption="–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    os.remove(txt_file_path)
    os.remove(excel_file_path)

@dp.callback_query_handler(lambda c: c.data == 'stat')
async def get_stat(callback_query: types.CallbackQuery):
    stat = orm.stat()
    text = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat[0]}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {stat[1]}\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–∏–≤—à–∏—Ö —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏*'
    await callback_query.message.answer(text)

@dp.callback_query_handler(lambda c: c.data == 'menu')
async def exit(message: types.Message):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'
    inline_markup = await menu.main_menu()
    await bot.send_message(message.from_user.id, text, reply_markup=inline_markup)

@app.get("/bot_status")
async def bot_status():
    return {"status": "running", "bot_name": "TherapyBot"}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI
def start_fastapi():
    run(app, host="0.0.0.0", port=8000)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
